{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","minions","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","bind","fetch","then","response","json","users","setState","e","this","target","value","filteredMinions","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAAC,GAAK,OACpB,sBAAKC,UAAU,iBAAf,UACK,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAML,EAAMI,QAAQE,OACnB,kCAAMN,EAAMI,QAAQG,MAApB,aCAGC,G,MAAW,SAAAR,GAAK,OACxB,qBAAKC,UAAU,YAAf,SACOD,EAAMI,QAAQK,KAAI,SAAAL,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCPrBK,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEvB,uBACQX,UAAY,SACZY,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCyCLG,G,wDAxCb,aAAc,IAAD,8BACX,gBAEKC,MAAQ,CACXZ,QAAS,GACTa,YAAa,IAGf,EAAKL,aAAe,EAAKA,aAAaM,KAAlB,gBART,E,gEAWQ,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEpB,QAASmB,S,mCAE/BE,GACXC,KAAKF,SAAS,CAACP,YAAaQ,EAAEE,OAAOC,U,+BAG7B,IAAD,EAE2BF,KAAKV,MAA/BZ,EAFD,EAECA,QAASa,EAFV,EAEUA,YACXY,EAAkBzB,EAAQ0B,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASf,EAAYc,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,iBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUR,QAAUyB,W,GAnCVI,cCEHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.77798b98.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n     <div className='card-container'>\n          <img alt=\"minions\" src={`https://robohash.org/${props.minions.id}?set=set2&size=180x180`} />\n         <h2>{ props.minions.name}</h2>\n          <p> { props.minions.email}  </p>\n     </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.components';\n\nimport './card-list.styles.css';\n\n\n\nexport const CardList = props => (\n     <div className='card-list'>\n          { props.minions.map(minions => (\n               <Card key={minions.id} minions={minions} />\n          ))}\n     </div>\n);","import React from 'react';\n\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handleChange}) => (\n\n  <input \n          className = 'search'\n          type='search' \n          placeholder= {placeholder}\n          onChange={handleChange} \n     />\n);","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list.component';\n\nimport { SearchBox } from './components/search-box/search-box.components';\n\nimport './App.css';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = { \n      minions: [],\n      searchField: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n  \n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ minions: users }));\n  }\n  handleChange(e) {\n    this.setState({searchField: e.target.value})\n  }\n\n  render() {\n\n    const { minions, searchField } =  this.state;\n    const filteredMinions = minions.filter(minions =>\n      minions.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder='search minions'\n          handleChange={this.handleChange}\n        />\n        <CardList minions={ filteredMinions } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}